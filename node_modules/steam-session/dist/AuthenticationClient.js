"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const events_1 = require("events");
const node_bignumber_1 = require("node-bignumber");
const http_1 = require("@doctormckay/stdlib/http");
const EAuthTokenPlatformType_1 = __importDefault(require("./enums-steam/EAuthTokenPlatformType"));
const EResult_1 = __importDefault(require("./enums-steam/EResult"));
const protobufs_1 = require("./protobufs");
const helpers_1 = require("./helpers");
const debug = (0, debug_1.default)('steam-session:AuthenticationClient');
class AuthenticationClient extends events_1.EventEmitter {
    constructor(platformType, transport, webClient) {
        super();
        this._transport = transport;
        this._platformType = platformType;
        this._webClient = webClient;
    }
    async getRsaKey(accountName) {
        return await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'GetPasswordRSAPublicKey',
            apiVersion: 1,
            data: { account_name: accountName }
        });
    }
    async encryptPassword(accountName, password) {
        let rsaInfo = await this.getRsaKey(accountName);
        let key = new node_bignumber_1.Key();
        key.setPublic(rsaInfo.publickey_mod, rsaInfo.publickey_exp);
        return {
            encryptedPassword: (0, node_bignumber_1.hex2b64)(key.encrypt(password)),
            keyTimestamp: rsaInfo.timestamp
        };
    }
    async startSessionWithCredentials(details) {
        let { websiteId, deviceDetails } = (0, helpers_1.getDataForPlatformType)(details.platformType);
        let data = {
            account_name: details.accountName,
            encrypted_password: details.encryptedPassword,
            encryption_timestamp: details.keyTimestamp,
            persistence: details.persistence,
            website_id: websiteId,
            device_details: deviceDetails
        };
        if (details.platformType == EAuthTokenPlatformType_1.default.SteamClient) {
            // At least for SteamClient logins, we don't supply device_details.
            // TODO: check if this is true for other platform types
            data.device_friendly_name = deviceDetails.device_friendly_name;
            data.platform_type = deviceDetails.platform_type;
            delete data.device_details;
        }
        if (details.steamGuardMachineToken) {
            if (Buffer.isBuffer(details.steamGuardMachineToken)) {
                data.guard_data = details.steamGuardMachineToken;
            }
            else if (typeof details.steamGuardMachineToken == 'string' && (0, helpers_1.isJwtValidForAudience)(details.steamGuardMachineToken, 'machine')) {
                data.guard_data = Buffer.from(details.steamGuardMachineToken, 'utf8');
            }
        }
        let result = await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'BeginAuthSessionViaCredentials',
            apiVersion: 1,
            data
        });
        return {
            clientId: result.client_id,
            requestId: result.request_id,
            pollInterval: result.interval,
            allowedConfirmations: result.allowed_confirmations.map(c => ({ type: c.confirmation_type, message: c.associated_message })),
            steamId: result.steamid,
            weakToken: result.weak_token
        };
    }
    async startSessionWithQR(details) {
        let { deviceDetails } = (0, helpers_1.getDataForPlatformType)(details.platformType);
        let data = {
            device_details: deviceDetails
        };
        let result = await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'BeginAuthSessionViaQR',
            apiVersion: 1,
            data
        });
        return {
            clientId: result.client_id,
            requestId: result.request_id,
            pollInterval: result.interval,
            allowedConfirmations: result.allowed_confirmations.map(c => ({ type: c.confirmation_type, message: c.associated_message })),
            challengeUrl: result.challenge_url,
            version: result.version
        };
    }
    async submitSteamGuardCode(details) {
        let data = {
            client_id: details.clientId,
            steamid: details.steamId,
            code: details.authCode,
            code_type: details.authCodeType
        };
        await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'UpdateAuthSessionWithSteamGuardCode',
            apiVersion: 1,
            data
        });
    }
    async checkMachineAuthOrSendCodeEmail(details) {
        let headers = Object.assign({ 'content-type': 'multipart/form-data' }, helpers_1.API_HEADERS);
        if (details.machineAuthToken) {
            headers.cookie = `steamMachineAuth${details.steamId}=${details.machineAuthToken}`;
        }
        let body = { clientid: details.clientId, steamid: details.steamId };
        debug('POST https://login.steampowered.com/jwt/checkdevice %o', body);
        let result = await this._webClient.request({
            method: 'POST',
            url: 'https://login.steampowered.com/jwt/checkdevice',
            multipartForm: http_1.HttpClient.simpleObjectToMultipartForm(body),
            headers: helpers_1.API_HEADERS
        });
        return result.jsonBody;
    }
    async pollLoginStatus(details) {
        let data = {
            client_id: details.clientId,
            request_id: details.requestId
        };
        let result = await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'PollAuthSessionStatus',
            apiVersion: 1,
            data
        });
        return {
            newClientId: result.new_client_id,
            newChallengeUrl: result.new_challenge_url,
            refreshToken: result.refresh_token,
            accessToken: result.access_token,
            hadRemoteInteraction: result.had_remote_interaction,
            accountName: result.account_name,
            newSteamGuardMachineAuth: result.new_guard_data
        };
    }
    async getAuthSessionInfo(accessToken, details) {
        let data = {
            client_id: details.clientId
        };
        let result = await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'GetAuthSessionInfo',
            apiVersion: 1,
            data,
            accessToken
        });
        return {
            ip: result.ip,
            geoloc: result.geoloc,
            city: result.city,
            state: result.state,
            platformType: result.platform_type,
            deviceFriendlyName: result.device_friendly_name,
            version: result.version,
            loginHistory: result.login_history,
            locationMismatch: result.requestor_location_mismatch,
            highUsageLogin: result.high_usage_login,
            requestedPersistence: result.requested_persistence
        };
    }
    async submitMobileConfirmation(accessToken, details) {
        let data = {
            version: details.version,
            client_id: details.clientId,
            steamid: details.steamId,
            signature: details.signature,
            confirm: details.confirm,
            persistence: details.persistence
        };
        await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'UpdateAuthSessionWithMobileConfirmation',
            apiVersion: 1,
            data,
            accessToken
        });
    }
    async generateAccessTokenForApp(refreshToken) {
        let data = {
            refresh_token: refreshToken,
            steamid: (0, helpers_1.decodeJwt)(refreshToken).sub
        };
        let result = await this.sendRequest({
            apiInterface: 'Authentication',
            apiMethod: 'GenerateAccessTokenForApp',
            apiVersion: 1,
            data
        });
        // We're done with the transport
        this._transport.close();
        return result.access_token;
    }
    async sendRequest(request) {
        // Right now we really only support IAuthenticationService
        let { request: requestProto, response: responseProto } = (0, protobufs_1.getProtoForMethod)(request.apiInterface, request.apiMethod);
        if (!requestProto || !responseProto) {
            throw new Error(`Unknown API method ${request.apiInterface}/${request.apiMethod}`);
        }
        let { headers } = (0, helpers_1.getDataForPlatformType)(this._platformType);
        this.emit('debug', request.apiMethod, request.data, headers);
        let result = await this._transport.sendRequest({
            apiInterface: request.apiInterface,
            apiMethod: request.apiMethod,
            apiVersion: request.apiVersion,
            requestData: requestProto.encode(request.data).finish(),
            accessToken: request.accessToken,
            headers
        });
        if (result.result != EResult_1.default.OK) {
            throw (0, helpers_1.eresultError)(result.result, result.errorMessage);
        }
        // We need to decode the response data, if there was any
        let responseData = result.responseData && result.responseData.length > 0 ? result.responseData : Buffer.alloc(0);
        let decodedData = responseProto.decode(responseData);
        return responseProto.toObject(decodedData, { longs: String });
    }
    close() {
        this._transport.close();
    }
}
exports.default = AuthenticationClient;
//# sourceMappingURL=data:application/json;base64,